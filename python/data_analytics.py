# -*- coding: utf-8 -*-
"""Data_Analytics

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WXsc7v_p2Gag_LC14I9AuveUHo3OC3LF

> Â© 2022, Kush Khurana (mailto: kush.khurana@ashoka.edu.in). 
> - Licensed under CC BY-NC-SA 4.0 Creative Commons (Attribution-NonCommercial-ShareAlike 4.0 International)

**Sorting | Pandas-Index | Joins | Groupby-Apply**
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# charts
import seaborn as sns 
import matplotlib.pyplot as plt
# %matplotlib inline

from IPython.display import display

base_path = "/content/drive/MyDrive/Classroom/"
data_export = pd.read_csv(base_path+"2018-2010_export.csv")
data_import = pd.read_csv(base_path+"2018-2010_import.csv")
print(data_export.shape, data_import.shape)

data_import.head(5)

"""Let's focus only on 2018"""

data_export1= data_export[data_export.year==2018]
data_import1 = data_import[data_import.year==2018]

exported = data_export1.groupby('Commodity').agg({'value':np.sum,'country':'nunique'})
imported = data_import1.groupby('Commodity').agg({'value':'sum','country':lambda ls: len(set(ls))}) 
#NOTE: Different ways of doing the same operations.. Let's Discuss
display(exported.shape, exported.head(), imported.shape, imported.head())

"""### Sorting"""

top_exports1 = exported.sort_values('value', ascending=False)[:10]
top_imports1 = imported.sort_values('value', ascending=False)[:10]
display(top_exports1.tail(3), top_imports1.tail(3))

top_imports1.columns

top_imports1.shape, top_imports1.reset_index().shape

top_imports1.reset_index()

top_imports1.index # reset_index has not happened inplace

top_imports1.reset_index().index

"""# Join by Index: *pd.concat*

<div class="alert alert-warning">

<b>CLASS CHALLENGE: </b>:

<ul>
  <li>What does the following code do?</li>
  <li>Can you write it in some other way - suited to wider applications?</li>
</ul>
 
</div>
"""

len(set(top_exports1.index) & set(top_imports1.index))

pd.concat([top_exports1, top_imports1], join='inner', axis=1)

pd.concat([top_exports1, top_imports1], join='outer', axis=1, sort=True)

"""## Do not do this.. warning!"""

pd.concat([top_exports1.reset_index(), top_imports1.reset_index()], join='inner', axis=1)

"""# Join by Key: *pd.merge*"""

pd.merge(top_exports1.reset_index(), 
         top_imports1.reset_index(), 
         how='inner', on=['Commodity'],
         suffixes=('_exp', '_imp'))

pd.merge(top_exports1.reset_index(), 
         top_imports1.reset_index(), 
         how='outer', on=['Commodity'],
         suffixes=('_exp', '_imp'))

pd.merge(top_exports1.reset_index(), 
         top_imports1.reset_index(), 
         how='left', on=['Commodity'],
         suffixes=('_exp', '_imp'))

pd.merge(top_exports1.reset_index(), 
         top_imports1.reset_index(), 
         how='right', on=['Commodity'],
         suffixes=('_exp', '_imp'))

"""



<div class="alert alert-warning">

<b>CLASS CHALLENGE: </b>:

<ul>
  <li> How many commodities occur in total in both of top_exports, top_imports?</li>
    <li> Plot the deficit/surpluses of these commodities</li>
</ul>
 
</div>"""

commons = pd.merge(top_exports1.reset_index(), 
         top_imports1.reset_index(), 
         how='inner', on=['Commodity'],
         suffixes=('_exp', '_imp'))

commons['surplus'] = commons['value_exp'] - commons['value_imp']
commons

"""<div class="alert alert-success">

<b>EXERCISE 1 (20 points)</b>:

<ul>
  <li>Is top 10 the best way to define "top exports" or top imports"? Can you suggest something better - explain with plots, code etc.?</li>
</ul>
 
    
</div>

# Solution for Exercise1

Earlier top_imports and top_exports were defined for only year 2018. We can use quantiles to get the top_exports and top_imports for all years.

Step-1. Clean the original dataset
"""

#define a function to clean data 
def cleandata(df):
    #setting country UNSPECIFIED to nan
    df['country']= df['country'].apply(lambda x : np.NaN if x == "UNSPECIFIED" else x)
    #drop where value is 0 . 
    df = df[df.value!=0]
    df.dropna(inplace=True)
    df.year = pd.Categorical(df.year)
    df.drop_duplicates(keep="first",inplace=True)
    return df

#Clean data using the function created above 
data_import = cleandata(data_import)
data_export = cleandata(data_export)

"""Step2. Create new dataframes using commodity as groups or indices and add the values to particular index(commodity). """

#New dataframes grouped by commodity 
exported = data_export.groupby('Commodity').agg({'value':'sum', 'country':'nunique'})
imported = data_import.groupby('Commodity').agg({'value':'sum', 'country':'nunique'})
#Check the shape
display(exported.shape, exported.head(), imported.shape, imported.head())

"""Step-3. Create a threshold function to define top criteria using quantiles. """

#Create a new function to define the top 
def threshold(df):
    q1 = df.value.quantile(.25)
    q3 = df.value.quantile(.75)
    #Using quantiles create a limit criteria 
    Max_limit = q3+ 1.75*(q3-q1)/2
    top_com= df[df.value>Max_limit]
    #sort the data using 'value'
    top_com= top_com.sort_values('value', ascending=False)
    return top_com
  
top_exports=threshold(exported)
top_imports=threshold(imported)

#Extra: Cross-check the duplicate, remove hash below to run the code 
#top_exports.duplicated(), top_imports.duplicated()
top_exports.shape, top_imports.shape

#Now plot the bar graph using 
sns.set(rc={'figure.figsize':(15,10)})
sns.barplot(top_exports.value, top_exports.index).set_title('top exports')
plt.show()
sns.barplot(top_imports.value, top_imports.index).set_title('top imports')
plt.show()

"""<div class="alert alert-success">

<b>EXERCISE 2 (20 Points)</b>:

<ul>
  <li>Plot the deficits/surpluses for top_exported/imported commodities as per your definition. </li>
</ul>
 
    
</div>

Step-1. First find the deficit/surplus for top_imports 
In the previous exercise, we have got 15 commodities in top_imports and 16 commodities in top_exports.

# Solution for Exercise 2
"""

top_imports_deficits = pd.merge(top_imports.reset_index(), 
         exported.reset_index(), 
         how='left', on=['Commodity'],
         suffixes = ('_imp','_exp')
        )
top_imports_deficits['deficit'] = top_imports_deficits.value_exp - top_imports_deficits.value_imp
top_imports_deficits

"""Step-2. Find the deficit/surplus for top_exports """

top_exports_deficits = pd.merge(top_exports.reset_index(), 
         imported.reset_index(), 
         how='left', on=['Commodity'],
         suffixes = ('_exp','_imp')
        )
top_exports_deficits['deficit'] = top_exports_deficits.value_exp- top_exports_deficits.value_imp
top_exports_deficits

"""Step-3. Plot the deficit graph for top_imports
Note: In deficit column, positive value represents surplus since deficit formulae was used above. 
"""

# create subplot1
import plotly.graph_objs as go

Subplot1 = go.Bar(
                x = top_imports_deficits.Commodity,
                y = top_imports_deficits.value_imp,
                name = "Import for top_imports",
                marker = dict(color = 'rgba(0,191,200, 1)',
                             line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_imports_deficits.value_imp)
# create subplot2
Subplot2 = go.Bar(
                x = top_imports_deficits.Commodity,
                y = top_imports_deficits.value_exp,
                name = "Export for top_imports",
                marker = dict(color = 'rgba(1, 255, 110, 1)',
                              line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_imports_deficits.value_exp)
#create subplot3
Subplot3 = go.Bar(
                x = top_imports_deficits.Commodity,
                y = top_imports_deficits.deficit,
                name = "Trade Deficit/Surplus",
                marker = dict(color = 'rgba(210, 20, 160, 1)',
                              line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_imports_deficits.deficit)

#combine all subplots on one graph 
data = [Subplot1, Subplot2, Subplot3]
layout = go.Layout(barmode = "group")
fig = go.Figure(data = data, layout = layout)
fig.update_layout(
    title=go.layout.Title(
        text="Commodity wise top_Import/top_Export/Trade deficit or Surplus for top_imported data",
        xref="paper",
        x=0
      ),
    xaxis=go.layout.XAxis(
        title=go.layout.xaxis.Title(
            text="Year",
            font=dict(
                family="Courier New, monospace",
                size=18,
                color='#17becf'
            )
        )
    ),
    yaxis=go.layout.YAxis(
        title=go.layout.yaxis.Title(
            text="Value",
            font=dict(
                family="Courier New, monospace",
                size=18,
                color='#17becf'
            )
        )
    )
)
#update the size of the graph 
fig.update_layout(
    autosize=False,
    width=2000,
    height=1500,
    margin=dict(
        l=50,
        r=50,
        b=100,
        t=100,
        pad=4
    ),
)

fig.show()

"""Step-4. Plot the deficit/surplus graph for top_exports
Note: Positive value represents surplus and negative represents deficit here since I have used deficit formulae above. 
"""

# create subplot1
import plotly.graph_objs as go

Subplot1 = go.Bar(
                x = top_exports_deficits.Commodity,
                y = top_exports_deficits.value_exp,
                name = "Export for top_imports",
                marker = dict(color = 'rgba(10,101,100, 1)',
                             line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_exports_deficits.value_exp)
# create subplot2
Subplot2 = go.Bar(
                x = top_exports_deficits.Commodity,
                y = top_exports_deficits.value_imp,
                name = "Export for top_imports",
                marker = dict(color = 'rgba(1, 20, 200, 1)',
                              line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_exports_deficits.value_imp)
#create subplot3
Subplot3 = go.Bar(
                x = top_exports_deficits.Commodity,
                y = top_exports_deficits.deficit,
                name = "Trade Deficit/Surplus",
                marker = dict(color = 'rgba(10, 200, 200, 1)',
                              line=dict(color='rgb(0,0,0)',width=1.5)),
                text = top_exports_deficits.deficit)

#combine all subplots on one graph 
data = [Subplot1, Subplot2, Subplot3]
layout = go.Layout(barmode = "group")
fig = go.Figure(data = data, layout = layout)
fig.update_layout(
    title=go.layout.Title(
        text="Commodity wise top_Import/top_Export/Trade deficit or Surplus for top_exported data",
        xref="paper",
        x=0
      ),
    xaxis=go.layout.XAxis(
        title=go.layout.xaxis.Title(
            text="Year",
            font=dict(
                family="Courier New, monospace",
                size=18,
                color='#17becf'
            )
        )
    ),
    yaxis=go.layout.YAxis(
        title=go.layout.yaxis.Title(
            text="Value",
            font=dict(
                family="Georgia, monospace",
                size=18,
                color='#17becf'
            )
        )
    )
)
#update the size of the graph 
fig.update_layout(
    autosize=False,
    width=2000,
    height=1500,
    margin=dict(
        l=50,
        r=50,
        b=100,
        t=100,
        pad=4
    ),
)

fig.show()

"""<div class="alert alert-warning">

<b>CLASS CHALLENGE 3: </b>:

<ul>
  <li> Create a dataframe to lookup what dollar value was imported for each country-commodity pair</li>
</ul>
 
</div>
"""

data_import_grouped = data_import.groupby(['country','Commodity'])
type(data_import_grouped)

cci_lookup = data_import_grouped.agg({'value':'sum'}).reset_index()
cci_lookup.head()

"""# Group-By Apply

<div class="alert alert-warning">

<b>CLASS CHALLENGE 4: </b>:

<ul>
  <li> For the top 10 imported commodities, find the top 3 countries they are imported from</li>
</ul>
 
</div>
"""

top_imports1.reset_index().rename(columns={'country':'n_ctries'})

top_imports1.country.sum()

cci_lookup.rename(columns={'value':'country_value'})

top_imports1_wcs = pd.merge(top_imports1.reset_index().rename(columns={'country':'n_ctries'}), 
                            cci_lookup.rename(columns={'value':'country_value'}), 
                            how='left', on=['Commodity'])
display(top_imports1_wcs.shape)
top_imports1_wcs.head()

top_imports1_wcs.sort_values(['Commodity','country_value'], ascending=[True, False]).head()

top_imports1_w3cs = top_imports1_wcs.sort_values(['Commodity','country_value'], 
                                                ascending=[True,False]).groupby('Commodity').head(3)
top_imports1_w3cs

def get_topk_by(df, by, k=3, greater_is_top=True):
    return df.sort_values(by, ascending = not greater_is_top).head(k)

from functools import partial
get_top3_by_ctryval = partial(get_topk_by, by='country_value', k=3)
get_top5_by_ctryval = partial(get_topk_by, by='country_value', k=5)

def get_top3_by_ctryval_simple(df):
    desired_df = df.sort_values('country_value', ascending=False)[:3]
    return desired_df

top_imports1_wcs.head()

top_imports1_wcs.groupby('Commodity').apply(get_top3_by_ctryval_simple)

top_imports1_w3cs = top_imports1_wcs.groupby('Commodity').apply(get_top3_by_ctryval)
top_imports1_w3cs.head()

top_imports1_w3cs = top_imports1_wcs.groupby('Commodity').apply(get_top5_by_ctryval)
top_imports1_w3cs.head()

"""<div class="alert alert-success">

<b>EXERCISE 3: </b>:

<ul>
  <li> For the country commodity pairs in top_imports_w3cs, find out the fiscal deficits for the year 2018 (20 Points)</li>
  <li> Show these on an interactive scatter plot with import values on x axis, export values on y axis, where hovering should show up the country, commodity and deficit. Hint: Use plotly or one of the interactive visualization libraries in the colab tutorials given in first week's readings (40 Points)</li>
</ul>

</div>

# Solution for Exercise 3

Step-1. Part-1 Calculation
"""

#Resetting the index of the w3cs dataframe and obtain new dataframe 
top_imports1_w3cs_new = top_imports1_w3cs.reset_index(drop=True)

top_imports1_w3cs_new=top_imports1_w3cs_new[["Commodity","country","country_value"]]

data_export_new=data_export1[["Commodity","country","value"]]
data_export_new.rename(columns = {'value':'country_value'}, inplace = True)

#Find the trade deficits
trade_deficit_new = pd.merge(top_imports1_w3cs_new, data_export_new, how='left', 
                        on=['Commodity', 'country'], suffixes = ('_imp','_exp'))

trade_deficit_new['trade_deficit'] = trade_deficit_new.country_value_imp - trade_deficit_new.country_value_exp
trade_deficit_new

"""Step-2. For part-2 to plot the scatter plot. """

import numpy as np
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models.tools import HoverTool
from bokeh.models import ColumnDataSource
output_notebook()

fig= figure()
data = ColumnDataSource(trade_deficit_new)

#Create circle layer
fig.circle(x='country_value_imp', y='country_value_exp', source=data, size=5, color='blue')

#Create hover layer
hover = HoverTool()
hover.tooltips=[('Country', '@country'),('Commodity', '@Commodity'),('Trade Deficit', '@trade_deficit')]

#Merge two layers to get full graph
fig.add_tools(hover)
fig.title.text = 'Trade Deficits in year 2018 for top imports, for Top 3 Import Countries'
fig.xaxis.axis_label = 'Imports'
fig.yaxis.axis_label = 'Exports'
show(fig)